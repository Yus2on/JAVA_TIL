@startuml

interface IFoo {
   + void method(int x, int y);
}

abstract class Bar {
    + static String name; // + public
    Foo foo;
    # int x;              // protected
    ~ int y;             // default
    - void method (String string); // private
}

class Qoo {
    Foo foo;
}

class Foo {
   int x;
   void methodA();
}

Foo -left|> IFoo
Bar -o Foo
Qoo -right* Foo

title class Diagram Title

note bottom of foo
   Foo 는 Bar 가 Aggregation

Aggregation과 Composition의 공통점은, 둘 모두 멤버 변수로 클래스 객체를 사용한다는 점입니다.
다른점은, Aggregation의 경우 외부에서 객체가 생성된 후에 참조를 전달받고, Composition의 경우
내부에서 객체가 생성된다는 점입니다!


A가 B를 Composition하는 관계가 성립하려면,
A 객체 내부에서 B 객체가 생성(new 키워드 사용)되고, A 객체가 사라질 때 B 객체도 같이 사라져야 합니다.
(즉, 라이프사이클이 같아야 합니다.)

 not bottom of Bar
    void method (String str)
    return string

endnote
@enduml